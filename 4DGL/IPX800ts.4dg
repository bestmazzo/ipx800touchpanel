#platform "uLCD-32PT_GFX2"

//#USE DEBUG
#USE TOUCH
#USE ARDUINO
#inherit "4DGL_16bitColours.fnc"
#inherit "IPX800ts-translation.inc"
#inherit "IPX800ts-config.lib"
#inherit "IPX800ts-utils.lib"
#inherit "IPX800ts-scenario.lib"
#inherit "IPX800ts-control.lib"
#inherit "IPX800ts-gui.lib"


func main()
    boot();
#IF USING DEBUG
    gfx_Cls();
    debugNames();
#ENDIF
    wPush(prepareWindow(0));
    aWindow(INITIALIZE);
    var selected;
    repeat
     selected:=aWindow(SCAN);
     if (selected > 0) onShortClick(selected-1,-1);
//     if (selected < 0) onLongClick(ABS(selected)-1,-1);
    forever
endfunc

func boot()
    gfx_ScreenMode(LANDSCAPE);
    touch_Set(TOUCH_ENABLE);
    gfx_Set(TRANSPARENT_COLOUR,WHITE); // transparency works with WHITE

    com_SetBaud(COM0,5760);
    com_Init(rxBuf,89,0);
    com_TXbuffer(txBuf, 40);    // sets the buffer location for buffered transmission
    storeFunction:=storeRAMConfLine;

    vect_base[0]:=configModel; vect_base[1]:=configView; vect_base[2]:=configControl;

    confVectors[0]:=vect_base; confVectors[1]:=vect_boards; confVectors[2]:=vect_devices; confVectors[3]:=vect_windows;
    confVectors[4]:=vect_conditions; confVectors[5]:= vect_scenarios;

    pokeW(TEXT_COLOUR,BLACK);
    pokeW(TEXT_BACKGROUND,WHITE);
    IMGhndl:= file_LoadImageControl("ICONS.DAT", "ICONS.GCI",0);             // use fast mode 1 for this type of work
    img_Enable(IMGhndl, ALL);                        // first, disable all the images (ALL = -1), makes it easier to set up if we only need a few

    var i:=0;
    while( i<48)
        img(BG_GREY, 40*(i%8),40*(i/8),0);                   // set the checkout box position
        i++;
    wend

    gfx_Panel(PANEL_SUNKEN,40,60,240,120,WHITE);
    var ypos:=82;
    pokeW(TEXT_OPACITY, OPAQUE);
    img(OFFICE_SMALL,40,ypos,0);
    gfx_MoveTo(43,140);
    putstr("Loading...");

    var error:=0;
    var mode:=0;
    gfx_Set(TRANSPARENCY,ON);

    while (mode<2)
        i:=BASE_CFG;
        while( i<=SCENARIOS_CFG )
            if (loadConfFile(i,mode))
                touchMSG("ok");
                img(OK,70+i*25,ypos,mode);//            ok_icon(46+i*25,ypos);
            else
                error:=1;
                img(NO,70+i*25,ypos,0); //           no_icon(46+i*25,ypos);
            endif
            touch();
            i++;
        wend

        if (error)
            pause(10000);
            SystemReset();
        endif

        if (mode == 0)
            i:=BOARDS_CFG;
            while( i<=SCENARIOS_CFG )
                alloc(i++);
            wend
        endif
        mode++;
    wend

    i:=0;

    deviceBoard:=vect_devices[0]; deviceUsage:=vect_devices[1]; deviceIndex:=vect_devices[2]; deviceExtra:=vect_devices[3]; deviceName:=vect_devices[4];
 //   boardIP:=vect_boards[0]; boardName:=vect_boards[1];
    conditionItemA:=vect_conditions[0]; conditionOperator:=vect_conditions[1]; conditionItemB:=vect_conditions[2];
 //   actionScenario:=vect_actions[0]; actionType:=vect_actions[1]; actionArg:=vect_actions[2]; actionCondition:=vect_actions[3];
    windowIcon:=vect_windows[0]; windowName:=vect_windows[1]; windowWidgetList:=vect_windows[2];
 //   widgetWindow:=vect_widgets[0]; widgetActType:=vect_widgets[1]; widgetActArg:=vect_widgets[2];
    //scenarioIcon:=vect_scenarios[0];

    scenarioConf:=vect_scenarios[1]; scenarioName:=vect_scenarios[2]; scenarioActList:=vect_scenarios[3];

    deviceStatus:=mem_AllocZ(2*numVar[DEVICES_CFG]);

    while (i< numVar[DEVICES_CFG])
        deviceStatus[i++]:=-1;
    wend

    gfx_Set(TRANSPARENCY, OFF);

    setTimer(TIMER0,500,dispatchMainQueueActions);
    sys_SetTimerEvent(TIMER2,screensaver); // set screensaver action
    setTimer(TIMER4,configControl[TRIGGER_TEST_INTV]*1000,trigger);
    setTimer(TIMER5,60000,pingArduino); // set action for screen offr
    setTimer(TIMER7,200,parseStatus);

    baseQueue:=createQueue(0);
    queueScenario(-'S',-1);
endfunc

