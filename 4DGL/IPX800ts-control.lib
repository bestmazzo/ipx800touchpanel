#CONST
    WIDGET      'W'
    WINDOW      'w'
    BOARD       'b'
    DEVICE      'd'
    DEVUSAGE    'u'
    ACTION      'a'
    CONDITION   'C'
    SCENARIO    's'
    BACK        'b'
    CONFIG      'c'
    NONE        'n'
    STATUS      '?'
    TURNOFFRELAY 0
    TURNONRELAY  1
    SWITCHRELAY  2
    PULSERELAY   3
#END

// select ID from searchFrom where whereType = whereID
func search( var searchFrom, var whereType, var whereID, var *dstArray, var dstSize)
    var *array;
    var results:=0;
    var i:=0;
    array:= getConfArray(searchFrom,whereType);

    while( i<numVar[searchFrom])
        if ( array[i] == whereID )
          dstArray[results++]:=i;
          if (results == dstSize) break;
        endif
        i++;
    wend
return results;
endfunc


func controlDev(var dID, var action)
    controlRelay(deviceBoard[dID],deviceIndex[dID],action);
endfunc

func controlRelay(var boardID, var relayID, var action)
    to(COM0); print("ipx(",[DEC] boardID, [CHR] ',', [DEC] relayID, [CHR]  ',', [DEC] action, ")\n");
    while(com_TXcount());
endfunc


func testCondition(var cID)

  if (cID < 2) return cID;

  var value[2];
  var i:=0;
  var condIT[2];
    condIT[0]:=conditionItemA[cID];
    condIT[1]:=conditionItemB[cID];
        // extract values to be tested
  while (i < 2)
      var itemType, itemValue;

      itemType:=HIbyte(condIT[i]);
      itemValue:=LObyte(condIT[i]);
      if ( itemType == 0)
          value[i]:= itemValue;
      else if ( itemType == 'd')
          value[i]:= deviceStatus[itemValue];
          if (value[i] == -1) return 0;
      else if ( itemType == 'c')
          value[i]:= testCondition(itemValue);
      else if ( itemType == 'h')
#IF USING DEBUG
         txt_MoveCursor(0,0); print([DEC] itemValue, [CHR] ':', [DEC] time[0], [CHR] 'H');
#ENDIF
          value[i]:= (time[0] == itemValue);
      else if ( itemType == 'm')
#IF USING DEBUG
         txt_MoveCursor(0,0); print([DEC] itemValue, [CHR] ':', [DEC] time[1], [CHR] 'M');
#ENDIF
          value[i]:= (time[1] == itemValue && time[2] < (TRIGGER_TEST_INTV*2) ); //test is TRUE only if done in the [0-TRIGGER_TEST_INTV] seconds interval
      endif

      i++;
  wend
    // end extraction
    var op; op:=conditionOperator[cID];
    if (op == '==')
            return (value[0] == value[1] );
    else if (op == '!=') // !=
            return( value[0] != value[1] );
    else if (op == '<=') // <=
            return ( value[0] <= value[1] );
    else if (op == '>=') // >=
            return( value[0] >= value[1] );
    else if (op == ' <')
            return(value[0]  < value[1] );
    else if (op == ' >')
            return( value[0]  > value[1] );
    else if (op == '&&')
            return( value[0] * value[1] );
    else if (op == '||')
            return( value[0] && value[1] );
    else if (op == ' ^')
            return( value[0] || value[1] );
    endif
    return 0;
endfunc

func parseStatus()
sys_EventsPostpone();
    var str[13];
    var ptr, chr;
    ptr:=str_Ptr(str);

    while (com_Count())
        chr:=serin();
        if (chr == '\n')
            str_PutByte(ptr,0x00);
            parseStatusLine(str);
            ptr:=str_Ptr(str);
        else
            str_PutByte(ptr++, chr);                // read a byte from COM0
        endif
    wend
    sys_SetTimer(TIMER7,configControl[STATUS_PARSE_INTV]);
    sys_EventsResume();
endfunc

func parseStatusLine(var *str)
        var ptr; ptr:=str_Ptr(str);
        var id, typ;
        if (str_Length(ptr))

         if (str_GetWZ(&ptr,&id)) // reads board ID
            ptr++;
            typ:=str_GetByte(ptr); // reads data type a: analog l: leds/relays
            ptr+=2;
            var i;
            if (typ == 'l' || typ == 'a' || typ == 'd')
                i:=1;
                while (str_Length(ptr))
                    var x;
                    str_GetWZ(&ptr,&x);
                    updateDevice(id,typ,i++,x);
                    ptr++;
                wend
            endif
            if (typ == 't' && id==0)
                 i:=0;
                 while (i<3)
                    str_GetWZ(&ptr,&time[i]);
                    ptr++; i++;
                 wend
            endif
        endif

      endif
endfunc

func updateDevice(var boardID, var devtype, var devidx, var dat)
    var searchRes[15];
    var resNum,i;
    resNum:= search(DEVICES_CFG, D_BOARD, boardID, searchRes, 15);
    i:=0;
    while(i<resNum)
        var curItem; curItem:=searchRes[i];
        if (deviceIndex[curItem] == devidx)
            var dU; dU:=deviceUsage[curItem];
            if (devtype == 'l')
                if ( dU == APPLIANCE || dU == LIGHT )
                    deviceStatus[curItem]:=dat;
                    break;
                endif
            else if (devtype == 'a')
                if ( dU == TEMP || dU == LIGHTX || dU == TEMPX || dU == VOLTAGE || dU == HUMID )
                    deviceStatus[curItem]:=dat;
                    break;
                endif
            else if (devtype == 'd')
                if ( dU == BUTTON)
                    deviceStatus[curItem]:=dat;
                endif
            endif
        endif
        i++;
    wend
endfunc


